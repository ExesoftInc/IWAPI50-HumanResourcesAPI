// ----------------------------------------------------------------------------------
// <copyright company="Exesoft Inc.">
//	This code was generated by Instant Web API code automation software (https://www.InstantWebAPI.com)
//	Copyright Exesoft Inc. Â© 2019.  All rights reserved.
// </copyright>
// ----------------------------------------------------------------------------------

using AutoMapper;
using HumanResourcesAPI.Entities;
using HumanResourcesAPI.Models;
using HumanResourcesAPI.Services;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Linq.Expressions;
using System.Net;
using System.Threading.Tasks;

namespace HumanResourcesAPI.Services {
    
    
    public class EmployeeBuilder : IEmployeeBuilder {
        
        private IDbEntities _entities;
        
        private IMapper _mapper;
        
        private ILoggerManager _logger;
        
        public EmployeeBuilder(EntitiesContext context, IMapper mapper, ILoggerManager logger) {
            _entities = context;
            _mapper = mapper;
            _logger = logger;
        }
        
        private Expression<Func<Employee, EmployeeModel>>  ProjectToModel {
            get {
                return entity => _mapper.Map<EmployeeModel>(entity);
            }
        }
        
        public IQueryable<EmployeeModel> GetEmployees() {
            return _entities.Employees.Select(ProjectToModel);
        }
        
        public IList<ExpandoObject> GetDisplayModels(List<string> propNames) {
            var models = _entities.Employees.Select(ProjectToModel);

            var displayModels = new List<ExpandoObject>();
            foreach (var model in models)
            {
                dynamic displayModel = DynamicHelper.ConvertToExpando(model, propNames);
                displayModels.Add(displayModel);
            }

            return displayModels;
        }
        
        public async Task<BuilderResponse> GetEmployee_ByBusinessEntityID(int businessEntityID) {
          var query = await Search(_entities.Employees, x => x.BusinessEntityID == businessEntityID).Select(ProjectToModel)?.ToListAsync();
            if (query.Any()) {
              return new BuilderResponse{ Model = query.Single() }; 
            }
            else {
           return new BuilderResponse { RequestMessage = $"Record Not Found; Employee with businessEntityID = '{businessEntityID}' doesn't exist." }; 
            }
        }
        
        public async Task<BuilderResponse> AddEmployee(EmployeeModel model) {
           try
           {
                System.Int32 maxCount = 0;
                if(_entities.Employees.Count() > 0)
                    maxCount = _entities.Employees.Max(x => x.BusinessEntityID);
                model.BusinessEntityID= ++maxCount;
                 var entity = _mapper.Map<Employee>(model);
                _entities.Employees.Add(entity);
               await _entities.SaveChangesAsync();
                _logger.LogInfo(string.Format("Employee added with values: '{0}'", JsonConvert.SerializeObject(model)));
               return new BuilderResponse{ Model = new EmployeeModel(entity) }; 
            }
            catch (DbUpdateException ue)
            {
                if(ue.InnerException != null && ue.InnerException.Message.Contains("Cannot insert explicit value for identity column"))
                {
                    var inner = ue.InnerException;
                    _logger.LogError(inner.Message + Environment.NewLine + JsonConvert.SerializeObject(model) + Environment.NewLine + inner.StackTrace);
                    return new BuilderResponse { ErrorMessage = "IDENTITY_INSERT is set to OFF; Cannot insert explicit value for identity column when IDENTITY_INSERT is set to OFF."};
                }
                else if(ue.InnerException != null && ue.InnerException.Message.Contains("Cannot insert duplicate key row"))
                {
                    var inner = ue.InnerException;
                    _logger.LogError(inner.Message + Environment.NewLine + JsonConvert.SerializeObject(model) + Environment.NewLine + inner.StackTrace);
                    return new BuilderResponse { ErrorMessage = "Duplicate exception; Please verify that an item with these values doesn't already exists."};
                }
                _logger.LogError(ue.Message + ue.StackTrace);
                return new BuilderResponse { ErrorMessage = ue.Message };
            }
            catch (Exception e)
            {
                _logger.LogError(e.Message + e.StackTrace);
                return new BuilderResponse { ErrorMessage = e.Message};
            }
        }
        
        public async Task<BuilderResponse> UpdateEmployee(EmployeeModel model) {

          var query = Search(_entities.Employees, x =>  x.BusinessEntityID == model.BusinessEntityID);
            if (!query.Any()) {
              return new BuilderResponse { RequestMessage = "Record Not Found; " + string.Format("Employee with _businessEntityID = '{0}' doesn't exist.",model.BusinessEntityID)}; 
            }
           try
           {
            Employee entity = query.SingleOrDefault();
             entity = model.ToEntity(entity);
               await _entities.SaveChangesAsync();
                _logger.LogInfo(string.Format("Employee update with values: '{0}'", JsonConvert.SerializeObject(model)));
               return new BuilderResponse{ StatusCode = (int)HttpStatusCode.Created }; 
            }
            catch (DbUpdateException ue)
            {
                if(ue.InnerException != null && ue.InnerException.Message.Contains("Cannot insert duplicate key row"))
                {
                    var inner = ue.InnerException;
                    _logger.LogError(inner.Message + Environment.NewLine + JsonConvert.SerializeObject(model) + Environment.NewLine + inner.StackTrace);
                    return new BuilderResponse { ErrorMessage = "Duplicate exception; Please verify that an item with these values doesn't already exists."};
                }
                _logger.LogError(ue.Message + ue.StackTrace);
                return new BuilderResponse { ErrorMessage = ue.Message };
            }
            catch (Exception e)
            {
                _logger.LogError(e.Message + e.StackTrace);
                return new BuilderResponse { ErrorMessage = e.Message};
            }
        }
        
        public async Task<BuilderResponse> DeleteEmployee(int businessEntityID) {
          var query = Search(_entities.Employees, x => x.BusinessEntityID == businessEntityID);
            if (!query.Any()) {
              return new BuilderResponse { RequestMessage = "Record Not Found; " + string.Format("Employee with _businessEntityID = '{0}' doesn't exist.",businessEntityID)}; 
            }
            var entity = query.SingleOrDefault();

           try
           {
                _entities.Employees.Remove(entity);
               await _entities.SaveChangesAsync();
            _logger.LogInfo(string.Format("Employee deleted with values: '{0}'", JsonConvert.SerializeObject(new EmployeeModel(entity))));
               return new BuilderResponse{ StatusCode = (int)HttpStatusCode.NoContent }; 
            }
            catch (DbUpdateException ue)
            {
                if(ue.InnerException != null && ue.InnerException.Message.Contains("The DELETE statement conflicted with the REFERENCE constraint"))
                {
                    var inner = ue.InnerException;
                    _logger.LogError(inner.Message + inner.StackTrace);
                    return new BuilderResponse { ErrorMessage = "Please delete related items first."};
                }
                _logger.LogError(ue.Message + ue.StackTrace);
                return new BuilderResponse { ErrorMessage = ue.Message };
            }
            catch (Exception e)
            {
                _logger.LogError(e.Message + e.StackTrace);
                return new BuilderResponse { ErrorMessage = e.Message};
            }
        }
        
        private IQueryable<Employee> Search(IQueryable<Employee> query, Expression<Func<Employee, bool>> filter) {
            return query.Where(filter);
        }
    }
}

